yaxis = list(showgrid = FALSE))
})
})#close the shinyServer
##Section 4____________________________________________________
shinyApp(ui = ui, server = server) #need this if combining ui and server into one file.
#*save the following code in a file named app.R *
library(shiny)
##Section 2 ____________________________________________________
#set up the user interface
ui = shinyUI(
fluidPage( #allows layout to fill browser window
#adds a title to page and browser tab
#-use "title = 'tab name'" to name browser tab
sidebarPanel( #designates location of following items
htmlOutput("industry_selector"),#add selectinput boxs
htmlOutput("occupation_selector")# from objects created in server
),
mainPanel(
plotOutput("plot") #put plot item in main area
)
) )
##Section 3 ____________________________________________________
#server controls what is displayed by the user interface
server = shinyServer(function(input, output) {
#creates logic behind ui outputs ** pay attention to letter case in names
output$state_selector = renderUI({ #creates State select box object called in ui
selectInput(inputId = "industry", #name of input
label = "Industry:", #label displayed in ui
choices = as.character(unique(bls.spec$industry)),
# calls unique values from the State column in the previously created table
selected = "Management Occupations") #default choice (not required)
})
output$county_selector = renderUI({ #creates County select box object called in ui
data_available = bls.spec[bls.spec$industry == input$industry, "occ_title"]
#creates a reactive list of available counties based on the State selection made
selectInput(inputId = "occupation", #name of input
label = "Occupation:", #label displayed in ui
choices = unique(data_available), #calls list of available counties
selected = unique(data_available)[1])
})
output$plot1 = renderPlotly({plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker = list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):', schoolquality)) %>%
layout(title = 'Testing',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
})
})#close the shinyServer
##Section 4____________________________________________________
shinyApp(ui = ui, server = server) #need this if combining ui and server into one file.
library(shiny)
library(shinydashboard)
ui <- shinyUI(fluidPage(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector"),
mainPanel(plotlyOutput("plot"))
)
)
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Testing',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
ui <- shinyUI(fluidPage(
titlePanel("Reactive select input boxes"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Testing',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Testing',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
range = c(2.003297660701705, 5.191505530708712),
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
range = c(36.12621671352166, 91.72921793264332),
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(shiny)
library(plotly)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
load("adams.Rdata")
avgcommute <- select(avgcmt, name, avgcommute)
avgcommute <- rename(avgcommute, "nbhd"="name")
schools <- select(all, nbhd, schoolquality)
temp <- select(all, nbhd, grad.perc, cmas.perc) # temporary until housing data is completed
data <- left_join(schools, avgcommute, by="nbhd")
p <- plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker = list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):', schoolquality)) %>%
layout(title = 'Testing',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data, x = ~schoolquality, y = ~schoolquality, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
# ..................................................................................................
load("wages.Rdata")
knitr::opts_chunk$set(echo = TRUE)
setwd("R/ShiftResearchLab2018/final-data")
getwd()
library(knitr)
library(tidyverse)
library(shiny)
library(plotly)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
load("adams.Rdata")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Users/charmed33/R/ShiftResearchLab2018/documentation")
library(knitr)
library(tidyverse)
library(shiny)
library(plotly)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
load("adams.Rdata")
View(test)
test$occupation <- "Chief Executives"
View(test)
avgcommute <- select(avgcmt, name, avgcommute)
avgcommute <- rename(avgcommute, "nbhd"="name")
schools <- select(all, nbhd, schoolquality)
test$occupation <- "Chief Executives"
data <- left_join(schools, avgcommute, by="nbhd")
data <- left_join(data, test, by="nbhd")
p <- plot_ly(data, x = ~schoolquality, y = ~`Chief Executives`, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker = list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):', schoolquality)) %>%
layout(title = 'Testing',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
View(data)
ui <- shinyUI(fluidPage(
titlePanel("Housing Affordability Tool"),
sidebarPanel(
htmlOutput("industry_selector"),
htmlOutput("occupation_selector")
),
mainPanel(plotlyOutput("plot"))
))
server <- shinyServer(function(input, output) {
output$plot <- renderPlotly({
plot_ly(data = subset(data, data$occupation==input$occupation), x = ~schoolquality, y = ~affordability, type = 'scatter', mode = 'markers',
color = ~avgcommute, colors = 'Blues', marker =
list(size = ~avgcommute, opacity = 0.5), hoverinfo = 'text',
text = ~paste('Neighborhood:', nbhd, '<br>School Quality (Percentile):',
schoolquality)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)),
selected = "Management Occupations")
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = unique(available),
selected = unique(available)[1])
})
})
##
shinyApp(ui = ui, server = server)
